name: Smoke test "nrf-ci" build

on:
  push:
    branches:
    - main
  pull_request:
    paths:
      - src/nrf-ci/**
      - .github/workflows/smoke-nrf-ci.yaml
      - .github/actions/**
jobs:
  smoke-test-nrf-ci:
    name: Smoke test nrf-ci
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      id: checkout
      uses: actions/checkout@v3

    - name: Smoke test
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: smoke_test
      uses: ./.github/actions/smoke-test
      with:
        image: nrf-ci
        variant: dev

  build-test-nrf-ci-image:
    name: west build test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v3

    - name: Setup devcontainer cli
      run: |
        export DOCKER_BUILDKIT=1
        echo "(*) Installing @devcontainer/cli"
        npm install -g @devcontainers/cli

    - name: Build nrf-ci image
      run: |
        echo "(*) Building nrf-ci image"
        export VARIANT=dev
        devcontainer build \
        --workspace-folder src/nrf-ci \
        --image-name nrf-ci:local

    - name: Create workdir
      run: |
        echo "(*) Creating workdir"
        set -e
        echo "Local user: $(whoami), $(id)"
        DOCKER_USER=$(docker run --rm nrf-ci:local whoami)
        DOCKER_USER_ID=$(docker run --rm nrf-ci:local id -u)
        DOCKER_USER_GROUP_ID=$(docker run --rm nrf-ci:local id -g)
        echo "Docker user: ${DOCKER_USER}, ${DOCKER_USER_ID}, ${DOCKER_USER_GROUP_ID}"
        echo "Creating the user group in the host system"
        if [ $(getent group ${DOCKER_USER_GROUP_ID}) ]; then
          echo "Group ${DOCKER_USER_GROUP_ID} already exists"
        else
          echo "Group ${DOCKER_USER_GROUP_ID} does not exist"
          sudo groupadd -g ${DOCKER_USER_GROUP_ID} ${DOCKER_USER}
        fi
        echo "Creating the user in the host system"
        if [ $(getent passwd ${DOCKER_USER_ID}) ]; then
          echo "User ${DOCKER_USER_ID} already exists"
        else
          echo "User ${DOCKER_USER_ID} does not exist"
          sudo useradd -u ${DOCKER_USER_ID} -g ${DOCKER_USER_GROUP_ID} -m ${DOCKER_USER}
        fi
        mkdir -p /tmp/ncs-example
        sudo chown -R ${DOCKER_USER_ID}:${DOCKER_USER_GROUP_ID} /tmp/ncs-example
        sudo chmod -R 777 /tmp/ncs-example
        echo "ls -la: $(ls -la)"
        su - vscode -c 'touch /tmp/ncs-example/test.txt'

    - name: west init
      run: |
        docker run \
        --rm \
        --user vscode \
        --mount type=bind,source=/tmp/ncs-example,target=/home/vscode/ncs-example \
        --workdir /home/vscode/ \
        nrf-ci:local \
        west init -m https://github.com/nrfconnect/ncs-example-application --mr main /home/vscode/ncs-example

    - name: west update
      run: |
         echo "(*) west update"
         docker run \
          -u vscode  \
          --rm \
          --mount type=bind,source=/tmp/ncs-example,target=/home/vscode/ncs-example \
          --workdir /home/vscode/ncs-example \
          nrf-ci:local west update

    - name: west build
      run: |
        echo "(*) west build"
        docker run \
        -u vscode  \
        --rm \
        --mount type=bind,source=/tmp/ncs-example,target=/home/vscode/ncs-example \
        --workdir /home/vscode/ncs-example \
        nrf-ci:local nrf-ci:local west build -b custom_plank ncs-example-application/app
